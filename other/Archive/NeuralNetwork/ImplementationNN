
import numpy as np
import matplotlib.pyplot as plt

import requests
import pandas as pd

from scipy import optimize




r3 = requests.get('https://min-api.cryptocompare.com/data/histohour?fsym=BTC&tsym=USD&limit=2000&api_key=e1332a9d3bf8a7731179c58621ec3d62e20b73763fbc8ddaa54e759e9cd33d3b')
 
trainX = []
trainY = []

testX = []
testY = []
dataset = r3.json()['Data']

def prepareDF(data):
    x_normed = data/ data.max(axis=0)   
    return x_normed

def createTrain(dataset, array):
    for i in range(len(dataset)-(len(dataset)//10)):
        currentdata = dataset[i]['close']
        previousdata= dataset[i-1]['close']
        array.append([dataset[i]['close'], dataset[i]['volumeto'],dataset[i]['volumefrom'],currentdata-previousdata])
    NewArray = np.asarray(array)
    return prepareDF(NewArray)

def createTrainOutput(dataset, array):
    for i in range(len(dataset)-(len(dataset)//10)):
        currentdatapredict = dataset[i]['close']
        previousdatapredict= dataset[i-1]['close']
        if currentdatapredict-previousdatapredict < 0:
            array.append([0])
        else:
            array.append([1])
    NewArray = np.asarray(array)
    return prepareDF(NewArray)

def createTestInput(dataset, array):
    length = 9*(len(dataset))//10
    for i in range(len(dataset)-length):
        currentdata = dataset[length+i]['close']
        previousdata= dataset[length+i-1]['close']
        array.append([dataset[i]['close'], dataset[i]['volumeto'],dataset[i]['volumefrom'],currentdata-previousdata])
    NewArray = np.asarray(array)
    return prepareDF(NewArray)

def createTestOutput(dataset, array):
    length = 9*(len(dataset))//10
    for i in range(len(dataset)-length):
        currentdatapredict = dataset[length+i]['close']
        previousdatapredict= dataset[length+i-1]['close']
        if currentdatapredict-previousdatapredict < 0:
            array.append([0])
        else:
            array.append([1])
    NewArray = np.asarray(array)
    return prepareDF(NewArray)




trainX = createTrain(dataset[:-1], trainX)
trainY = createTrainOutput(dataset[1:], trainY)

testX = createTestInput(dataset[:-1], testX)
testY = createTestOutput(dataset[1:], testY)


# print(testX)
# print("test", testY)
StartingDataMax = 1
StartingDataMin = 1


class Neural_Network(object):
    def __init__(self, Lambda=0):        
        #Define Hyperparameters
        self.inputLayerSize = 4
        self.hiddenLayerSize = 1
        self.outputLayerSize = 1

        #Weights (parameters)
        self.W1 = np.random.randn(self.inputLayerSize,self.hiddenLayerSize)
        self.W2 = np.random.randn(self.hiddenLayerSize,self.outputLayerSize)
        
        #Regularization Parameter:
        self.Lambda = Lambda
        
    def forward(self, X):
        #Propogate inputs though network
        self.z2 = np.dot(X, self.W1)
        self.a2 = self.sigmoid(self.z2)
        self.z3 = np.dot(self.a2, self.W2)
        yHat = np.round(self.sigmoid(self.z3),0)
        return yHat
        
    def sigmoid(self, z):
        #Apply sigmoid activation function to scalar, vector, or matrix
        return np.maximum(0,z)
        # return 1/(1+np.exp(-z))
    
    def sigmoidPrime(self,z):
        #Gradient of sigmoid
        return np.where(z>=0,1,0) 
        # return np.exp(-z)/((1+np.exp(-z))**2)
    
    def costFunction(self, X, y):
        #Compute cost for given X,y, use weights already stored in class.
        self.yHat = self.forward(X)
        J = 0.5*sum((y-self.yHat)**2)/X.shape[0] + (self.Lambda/2)*(np.sum(self.W1**2)+np.sum(self.W2**2))
        return J
        
    def prediction(self, X, y):
        #Compute cost for given X,y, use weights already stored in class.
        self.pred = self.forward(X)
        return self.pred
    
    def output(self, X, y):
        return y

    def costFunctionPrime(self, X, y):
        #Compute derivative with respect to W and W2 for a given X and y:
        self.yHat = self.forward(X)
        
        delta3 = np.multiply(-(y-self.yHat), self.sigmoidPrime(self.z3))
        #Add gradient of regularization term:
        print(self.a2.T)
        dJdW2 = np.dot(self.a2.T, delta3)/X.shape[0] + self.Lambda*self.W2

        # dJdW2 = np.dot(self.a2.T, delta3)/X.shape[0] + self.Lambda*self.W2
        
        delta2 = np.dot(delta3, self.W2.T)*self.sigmoidPrime(self.z2)
        #Add gradient of regularization term:
        dJdW1 = np.dot(X.T, delta2)/X.shape[0] + self.Lambda*self.W1
        # dJdW1 = np.dot(X.T, delta2)/X.shape[0] + self.Lambda*self.W1
        
        return dJdW1, dJdW2
    
    #Helper functions for interacting with other methods/classes
    def getParams(self):
        #Get W1 and W2 Rolled into vector:
        params = np.concatenate((self.W1.ravel(), self.W2.ravel()))
        return params
    
    def setParams(self, params):
        #Set W1 and W2 using single parameter vector:
        W1_start = 0
        W1_end = self.hiddenLayerSize*self.inputLayerSize
        self.W1 = np.reshape(params[W1_start:W1_end], \
                             (self.inputLayerSize, self.hiddenLayerSize))

        W2_end = W1_end + self.hiddenLayerSize*self.outputLayerSize

        self.W2 = np.reshape(params[W1_end:W2_end], \
                             (self.hiddenLayerSize, self.outputLayerSize))
        
    def computeGradients(self, X, y):
        dJdW1, dJdW2 = self.costFunctionPrime(X, y)
        return np.concatenate((dJdW1.ravel(), dJdW2.ravel()))

        
def computeNumericalGradient(N, X, y):
        paramsInitial = N.getParams()
        numgrad = np.zeros(paramsInitial.shape)
        perturb = np.zeros(paramsInitial.shape)
        e = 1e-4

        for p in range(len(paramsInitial)):
            #Set perturbation vector
            perturb[p] = e
            N.setParams(paramsInitial + perturb)
            loss2 = N.costFunction(X, y)
            
            N.setParams(paramsInitial - perturb)
            loss1 = N.costFunction(X, y)

            #Compute Numerical Gradient
            numgrad[p] = (loss2 - loss1) / (2*e)

            #Return the value we changed to zero:
            perturb[p] = 0
            
        #Return Params to original value:
        N.setParams(paramsInitial)

        return numgrad 
        

class trainer(object):
    def __init__(self, N):
        #Make Local reference to network:
        self.N = N
        
    def callbackF(self, params):
        self.N.setParams(params)
        self.J.append(self.N.costFunction(self.X, self.y))
        self.testJ.append(self.N.costFunction(self.testX, self.testY))
        self.yHatValue.append(self.N.prediction(self.testX, self.testY))
        
        
    def costFunctionWrapper(self, params, X, y):
        self.N.setParams(params)
        cost = self.N.costFunction(X, y)
        grad = self.N.computeGradients(X,y)
        
        return cost, grad
        
    def train(self, trainX, trainY, testX, testY):
        #Make an internal variable for the callback function:
        self.X = trainX
        self.y = trainY
        
        self.testX = testX
        self.testY = testY

        #Make empty list to store training costs:
        self.J = []
        self.testJ = []
        self.yHatValue = []
  
        params0 = self.N.getParams()

        options = {'maxiter': 1000, 'disp' : True}
        _res = optimize.minimize(self.costFunctionWrapper, params0, jac=True, method='BFGS', \
                                 args=(trainX, trainY), options=options, callback=self.callbackF)
            #    _res = optimize.minimize(self.costFunctionWrapper, params0, jac=True, method='Nelder-Mead', \
            #                      args=(trainX, trainY), options=options, callback=self.callbackF)
        # res = minimize(loglikelihood, (0.01, 0.1,0.1), method = 'Nelder-Mead',args = (atimes,))

        self.N.setParams(_res.x)
        self.optimizationResults = _res




NN = Neural_Network(Lambda=0.0001)

T = trainer(NN)
T.train(trainX, trainY, testX, testY)

f1 = plt.figure()
ax1 = f1.add_subplot(111)
ax1.plot(testY)
ax1.plot(NN.pred)


plt.xlabel('Iterations')
plt.ylabel('Cost')
plt.savefig('/usercode/myfig')
plt.show()
